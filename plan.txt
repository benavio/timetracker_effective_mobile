1. Выставить REST методы
    Получение данных пользователей

    Фильтрация по всем полям. Реализовать возможность фильтрации пользователей по всем доступным полям.
    Пагинация. Добавить поддержку пагинации для списка пользователей.
    Получение трудозатрат по пользователю за период. Включить возможность получения трудозатрат по пользователю за определённый период с сортировкой от большей затраты к меньшей.
    Начать отсчёт времени по задаче для пользователя. Добавить метод для начала отсчёта времени по задаче для конкретного пользователя.
    Закончить отсчёт времени по задаче для пользователя. Реализовать метод для окончания отсчёта времени по задаче.
    Удаление пользователя. Включить возможность удаления пользователя.
    Изменение данных пользователя. Добавить метод для изменения данных пользователя.
    Добавление нового пользователя. Реализовать метод для добавления нового пользователя с переданными данными в формате:

    json

    {
        "passportNumber": "1234 567890"
    }

2. Запрос в API и обогащение данных

    При добавлении пользователя, выполнить запрос к внешнему API, описанному Swagger-документацией:

    yaml

    openapi: 3.0.3
    info:
      title: People info
      version: 0.0.1
    paths:
      /info:
        get:
          parameters:
            - name: passportSerie
              in: query
              required: true
              schema:
                type: integer
            - name: passportNumber
              in: query
              required: true
              schema:
                type: integer
          responses:
            '200':
              description: Ok
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/People'
            '400':
              description: Bad request
            '500':
              description: Internal server error
    components:
      schemas:
        People:
          required:
            - surname
            - name
            - address
          type: object
          properties:
            surname:
              type: string
              example: Иванов
            name:
              type: string
              example: Иван
            patronymic:
              type: string
              example: Иванович
            address:
              type: string
              example: г. Москва, ул. Ленина, д. 5, кв. 1

    Полученную информацию положить в PostgreSQL.

3. Структура базы данных

    Создать структуру базы данных с помощью миграций при старте сервиса. Миграции обеспечат создание необходимых таблиц и связей в базе данных.

4. Логирование

    Покрыть код debug- и info-логами. Это позволит отслеживать выполнение запросов и возможные ошибки.

5. Конфигурационные данные

    Вынести все конфигурационные данные в .env-файл. Использовать библиотеки godotenv и cleanenv для работы с переменными окружения.

6. Генерация Swagger-документации

    Сгенерировать Swagger-документацию для реализованного API. Это позволит иметь актуальное описание всех доступных методов и их параметров.

Пошаговое руководство

    Определение структуры базы данных:
        Таблица для пользователей.
        Таблица для задач.
        Таблица для логирования трудозатрат.

    Реализация API-методов:
        Создание маршрутов с помощью chi router.
        Написание обработчиков для каждого метода.
        Реализация фильтрации, пагинации и сортировки.

    Интеграция с внешним API:
        Написание кода для выполнения запросов к внешнему API.
        Обработка и сохранение полученной информации в базе данных.

    Добавление логирования:
        Интеграция slog для логирования.
        Добавление логов в критических точках кода.

    Работа с конфигурацией:
        Создание .env-файла с необходимыми конфигурациями.
        Загрузка конфигураций с использованием godotenv и cleanenv.

    Генерация Swagger-документации:
        Использование инструмента для генерации документации на основе аннотаций в коде (например, swaggo/swag).

Таким образом, выполнение всех этих шагов позволит реализовать функциональный тайм-трекер с необходимыми API методами,
 логированием, интеграцией с внешним сервисом и генерацией документации.